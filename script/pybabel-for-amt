#!/usr/bin/env python

import re
import sys
from typing import Any

from babel.core import get_global
from babel.messages.frontend import main


def hack_babel(custom_locales: dict[str, str]) -> None:
    """Hack Babel core to make it support custom locale names.
    Copied from https://github.com/python-babel/babel/issues/454

    Args:
        custom_locales: Mapping from { custom name => ordinary name }
    """

    # In order for Babel to know "en_CUSTOM", we have to hack its database and put our custom
    # locale names there.
    # This database is pickle-loaded from a .dat file and cached, so we only have to do it once.
    db = get_global("likely_subtags")
    for custom_name in custom_locales:
        db[custom_name] = custom_name  # pyright: ignore [reportIndexIssue]

    # Also, monkey-patch the exists() and load() functions that load locale data from 'babel/locale-data'
    import babel.localedata

    # Originals
    o_exists, o_load = babel.localedata.exists, babel.localedata.load

    # Make sure we do not patch twice
    if o_exists.__module__ != __name__:
        # Definitions
        def exists(name: str) -> bool:
            # Convert custom names to normalized names
            name = custom_locales.get(name, name)
            return o_exists(name)

        def load(name: str, merge_inherited: bool = True) -> dict[str, Any]:
            # Convert custom names to normalized names
            name = custom_locales.get(name, name)
            return o_load(name, merge_inherited)

        # Patch
        babel.localedata.exists = exists
        babel.localedata.load = load

        # See that they actually exist
        for normalized_name in custom_locales.values():
            assert o_exists(normalized_name)  # noqa


hack_babel(
    {
        "nl_FY": "fy",  # custom => original
    }
)


if __name__ == "__main__":
    sys.argv[0] = re.sub(r"(-script\.pyw|\.exe)?$", "", sys.argv[0])
    sys.exit(main())
