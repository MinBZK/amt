name: continuous-integration

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  pull_request:
    branches:
      - "main"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  POETRY_CACHE_DIR: ~/.cache/pypoetry
  PIPX_BIN_DIR: /usr/local/bin
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: "3.12"

jobs:
  # Create a dependency cache job that other jobs can depend on
  dependencies-cache:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Create hash of dependency files for more precise caching - fixed output format
      - name: Generate dependency cache keys
        id: cache-keys
        shell: bash
        run: |
          POETRY_KEY=$(md5sum poetry.lock pyproject.toml | awk '{print $1}')
          NPM_KEY=$(md5sum package-lock.json package.json | awk '{print $1}')
          echo "poetry-key=${POETRY_KEY}" >> $GITHUB_OUTPUT
          echo "npm-key=${NPM_KEY}" >> $GITHUB_OUTPUT

      # Install pipx once and cache it
      - name: Cache pipx
        uses: actions/cache@v4
        id: pipx-cache
        with:
          path: ~/.local/pipx
          key: ${{ runner.os }}-pipx-${{ steps.cache-keys.outputs.poetry-key }}

      - name: Install poetry
        if: steps.pipx-cache.outputs.cache-hit != 'true'
        run: pipx install poetry

      # Setup Python with poetry
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # Cache the entire poetry environment based on lock file
      - name: Cache poetry environment
        uses: actions/cache@v4
        id: poetry-cache
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ steps.cache-keys.outputs.poetry-key }}

      # Only install if cache miss
      - name: Install poetry dependencies
        if: steps.poetry-cache.outputs.cache-hit != 'true'
        run: poetry install

      # Setup Node.js from .nvmrc
      - uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc

      # Cache npm modules based on lock file
      - name: Cache npm modules
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ steps.cache-keys.outputs.npm-key }}

      # Only install if cache miss
      - name: Install npm dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm ci

      # Create empty file to signal dependency caching is complete
      - name: Mark dependencies cached
        run: touch .dependencies-cached

      # Upload marker file as artifact to signal to other jobs that caching is complete
      - name: Upload dependency status
        uses: actions/upload-artifact@v4
        with:
          name: dependencies-cache-marker
          path: .dependencies-cached
          retention-days: 1

  lint:
    needs: dependencies-cache
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Get the dependency cache keys - fixed output format
      - name: Generate dependency cache keys
        id: cache-keys
        shell: bash
        run: |
          POETRY_KEY=$(md5sum poetry.lock pyproject.toml | awk '{print $1}')
          NPM_KEY=$(md5sum package-lock.json package.json | awk '{print $1}')
          echo "poetry-key=${POETRY_KEY}" >> $GITHUB_OUTPUT
          echo "npm-key=${NPM_KEY}" >> $GITHUB_OUTPUT

      # Download cache marker
      - name: Download dependency status
        uses: actions/download-artifact@v4
        with:
          name: dependencies-cache-marker

      # Restore the cached pipx
      - name: Cache pipx
        uses: actions/cache@v4
        with:
          path: ~/.local/pipx
          key: ${{ runner.os }}-pipx-${{ steps.cache-keys.outputs.poetry-key }}

      # Setup Python with cached poetry
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # Restore poetry environment
      - name: Cache poetry environment
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ steps.cache-keys.outputs.poetry-key }}

      # Setup Node.js with cached modules
      - uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc

      # Restore npm cache
      - name: Cache npm modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ steps.cache-keys.outputs.npm-key }}

      # Run linting - no need to install dependencies again
      - name: Run pyright
        run: poetry run pyright

  security:
    needs: dependencies-cache
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Get the dependency cache keys - fixed output format
      - name: Generate dependency cache keys
        id: cache-keys
        shell: bash
        run: |
          POETRY_KEY=$(md5sum poetry.lock pyproject.toml | awk '{print $1}')
          echo "poetry-key=${POETRY_KEY}" >> $GITHUB_OUTPUT

      # Download cache marker
      - name: Download dependency status
        uses: actions/download-artifact@v4
        with:
          name: dependencies-cache-marker

      # Restore the cached pipx
      - name: Cache pipx
        uses: actions/cache@v4
        with:
          path: ~/.local/pipx
          key: ${{ runner.os }}-pipx-${{ steps.cache-keys.outputs.poetry-key }}

      # Setup Python with cached poetry
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # Restore poetry environment
      - name: Cache poetry environment
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ steps.cache-keys.outputs.poetry-key }}

      # Run security check - no need to install dependencies again
      - name: check licenses used by project in pyproject.toml
        run: poetry run liccheck -s pyproject.toml

      # Cache Trivy database to avoid repeated downloads
      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: ${{ runner.os }}-trivy-${{ hashFiles('trivy.yaml') }}
          restore-keys: |
            ${{ runner.os }}-trivy-

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          trivy-config: trivy.yaml
          scan-type: fs
          scan-ref: "."

  # Cache Docker images to avoid rebuilding
  docker-build:
    needs: dependencies-cache
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Set up Docker Buildx with caching
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      # Create hash of Dockerfile and related files for cache key - fixed output format
      - name: Generate Docker cache key
        id: docker-key
        shell: bash
        run: |
          DOCKER_KEY=$(md5sum Dockerfile poetry.lock pyproject.toml package-lock.json package.json | awk '{print $1}')
          echo "docker-key=${DOCKER_KEY}" >> $GITHUB_OUTPUT

      # Cache Docker layers between runs
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ steps.docker-key.outputs.docker-key }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Build and export Docker images for testing
      - name: Build Docker images
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/ci-test:${{ github.sha }}
            ghcr.io/${{ github.repository }}/ci-test:latest
          target: test
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      # Move cache to prevent it from growing indefinitely
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  test-compose:
    runs-on: ubuntu-latest
    needs: [docker-build]
    steps:
      - uses: actions/checkout@v4
      - run: mv compose.test.yml compose.override.yml

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Use pre-built image for testing
      - name: Update docker-compose to use pre-built image
        run: |
          sed -i 's|build:|image: ghcr.io/${{ github.repository }}/ci-test:${{ github.sha }}|g' compose.yml
          sed -i '/context:/d' compose.yml
          sed -i '/dockerfile:/d' compose.yml
          sed -i '/target:/d' compose.override.yml
          sed -i 's|build:|image: ghcr.io/${{ github.repository }}/ci-test:${{ github.sha }}|g' compose.override.yml

      - run: docker compose down -v --remove-orphans
      - run: docker compose up -d

      - name: test frontend
        run: docker compose run amt-test npm run test

      - name: test app
        run: docker compose run amt-test poetry run pytest -m 'not slow' --db postgresql

      - name: db downgrade test
        run: docker compose exec -T amt alembic downgrade -1

      - name: db upgrade test
        run: docker compose exec -T amt alembic upgrade head

      - run: docker compose down -v --remove-orphans

  test-local-frontend:
    needs: dependencies-cache
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Get the dependency cache keys - fixed output format
      - name: Generate dependency cache keys
        id: cache-keys
        shell: bash
        run: |
          NPM_KEY=$(md5sum package-lock.json package.json | awk '{print $1}')
          echo "npm-key=${NPM_KEY}" >> $GITHUB_OUTPUT

      # Download cache marker
      - name: Download dependency status
        uses: actions/download-artifact@v4
        with:
          name: dependencies-cache-marker

      # Setup Node.js with cached modules
      - uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc

      # Restore npm cache
      - name: Cache npm modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ steps.cache-keys.outputs.npm-key }}

      # Run frontend tests - no need to install dependencies again
      - name: Run tests
        run: npm run test

  test-local-backend:
    needs: dependencies-cache
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"] # When using ACT only use ["3.12"]
      # Add fail-fast: false to continue other tests even if one fails
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Get the dependency cache keys - fixed output format
      - name: Generate dependency cache keys
        id: cache-keys
        shell: bash
        run: |
          POETRY_KEY=$(md5sum poetry.lock pyproject.toml | awk '{print $1}')
          NPM_KEY=$(md5sum package-lock.json package.json | awk '{print $1}')
          echo "poetry-key=${POETRY_KEY}" >> $GITHUB_OUTPUT
          echo "npm-key=${NPM_KEY}" >> $GITHUB_OUTPUT

      # Download cache marker
      - name: Download dependency status
        uses: actions/download-artifact@v4
        with:
          name: dependencies-cache-marker

      # Restore the cached pipx
      - name: Cache pipx
        uses: actions/cache@v4
        with:
          path: ~/.local/pipx
          key: ${{ runner.os }}-pipx-${{ steps.cache-keys.outputs.poetry-key }}

      # Setup Python with cached poetry
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # Restore poetry environment
      - name: Cache poetry environment
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ steps.cache-keys.outputs.poetry-key }}

      # Setup Node.js with cached modules
      - uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc

      # Restore npm cache
      - name: Cache npm modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ steps.cache-keys.outputs.npm-key }}

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Cache playwright browsers
      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/pyproject.toml') }}

      - name: Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: poetry run playwright install --with-deps

      - name: Start local task registry
        run: |
          docker pull ghcr.io/minbzk/task-registry@sha256:d3dc13c5352a2fc9ec835a574193ce6587d9ba85028f983b18dc75ddacc107e3
          docker run -d -p 8000:8000 --name task-registry ghcr.io/minbzk/task-registry@sha256:d3dc13c5352a2fc9ec835a574193ce6587d9ba85028f983b18dc75ddacc107e3

      - name: test migrations for sqlite
        run: |
          poetry run alembic upgrade head
          poetry run alembic downgrade -1
          poetry run alembic upgrade head

      - name: Generate required files
        run: |
          npm run build

      - name: Run pytest
        run: |
          export TASK_REGISTRY_URL=http://localhost:8000
          TZ=UTC poetry run coverage run -m pytest

      - name: Upload playwright tracing
        if: failure()
        uses: actions/upload-artifact@v4.6.2
        with:
          name: playwright-${{ github.sha }}
          path: test-results/
          if-no-files-found: error
          overwrite: true

      - name: Stop task registry
        if: always()
        run: docker stop task-registry && docker rm task-registry

      - name: run coverage report
        run: poetry run coverage report

      - name: run coverage html
        run: poetry run coverage html

      - name: Upload code coverage report
        if: matrix.python-version == '3.12'
        uses: actions/upload-artifact@v4.6.2
        with:
          name: codecoverage-${{ github.sha }}
          path: htmlcov/
          if-no-files-found: error
          overwrite: true

      - name: run coverage xml
        run: poetry run coverage xml

      - name: SonarCloud Scan
        if: matrix.python-version == '3.12' && github.actor != 'dependabot[bot]' && !env.ACT
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build:
    needs: [test-local-frontend, test-local-backend, test-compose]
    if: ${{ !github.event.act }}
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      security-events: write
      actions: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: get commit hash
        id: get_commit_hash
        shell: bash
        run: |
          COMMIT_HASH=$(git describe --tags)
          echo "commit_hash=${COMMIT_HASH}" >> $GITHUB_OUTPUT

      - name: Make changes to project to inject commit hash
        run: |
          sed -i 's/VERSION: str = .*$/VERSION: str = "${{ steps.get_commit_hash.outputs.commit_hash }}"/g' amt/core/config.py

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Create hash of Dockerfile and related files for cache key - fixed output format
      - name: Generate Docker cache key
        id: docker-key
        shell: bash
        run: |
          DOCKER_KEY=$(md5sum Dockerfile poetry.lock pyproject.toml package-lock.json package.json | awk '{print $1}')
          echo "docker-key=${DOCKER_KEY}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      # Cache Docker layers between runs
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ steps.docker-key.outputs.docker-key }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} #TODO(berry): fix on git labels multiple tags
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index

      - name: print metadata
        run: |
          echo "tags: ${{ steps.meta.outputs.tags }}"
          echo "labels: ${{ steps.meta.outputs.labels }}"
          echo "annotations: ${{ steps.meta.outputs.annotations }}"
          echo "hash: ${{ steps.get_commit_hash.outputs.commit_hash }}"

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          platforms: linux/amd64,linux/arm64,darwin/amd64
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      # Move cache to prevent it from growing indefinitely
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      # Cache Trivy database to avoid repeated downloads
      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: ${{ runner.os }}-trivy-${{ hashFiles('trivy.yaml') }}
          restore-keys: |
            ${{ runner.os }}-trivy-

      - name: Run Trivy vulnerability scanner sarif
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          scan-type: image
          exit-code: 0
          format: "sarif"
          output: "trivy-results.sarif"
        env:
          TRIVY_USERNAME: ${{ github.actor }}
          TRIVY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"

      - name: Run Trivy SBOM
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          scan-type: image
          exit-code: 0
          format: "cyclonedx"
          output: "trivy-sbom.json"
          list-all-pkgs: "true"
        env:
          TRIVY_USERNAME: ${{ github.actor }}
          TRIVY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Trivy license scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          scan-type: image
          scanners: "license"
          exit-code: 0
          output: "trivy-license.json"
        env:
          TRIVY_USERNAME: ${{ github.actor }}
          TRIVY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload SBOM & License
        uses: actions/upload-artifact@v4.6.2
        with:
          name: sbom-licence-${{ github.sha }}.json
          path: |
            trivy-sbom.json
            trivy-license.json
          if-no-files-found: error
          overwrite: true

  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    permissions:
      actions: write
    steps:
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: "" # make empty to get the correct tag
          flavor: |
            latest=false

      - name: print metadata
        run: |
          echo "tags: ${{ steps.meta.outputs.tags }}"

      - uses: actions/checkout@v4

      - name: Trigger deployment
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            gh workflow run deploy.yml -f image_tag=${{ fromJSON(steps.meta.outputs.json).tags[0] }} -f environment=production
          elif [ "${{ github.actor }}" == "uittenbroekrobbert" ]; then
            gh workflow run deploy.yml -f image_tag=${{ fromJSON(steps.meta.outputs.json).tags[0] }} -f environment=sandbox
          else
            echo "Not deploying changes, there is no trigger for ${{ github.event_name }} or ${{ github.actor }}"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notifyMattermost:
    runs-on: ubuntu-latest
    needs:
      [
        lint,
        security,
        test-local-backend,
        test-local-frontend,
        test-compose,
        build,
      ]
    if: ${{ always() && contains(needs.*.result, 'failure') }}
    steps:
      - uses: mattermost/action-mattermost-notify@master
        if: github.event_name != 'pull_request' || github.event.pull_request.draft == false
        with:
          MATTERMOST_WEBHOOK_URL: ${{ secrets.MM_WEBHOOK_URL }}
          MATTERMOST_CHANNEL: dev
          TEXT: |
            ${{ github.repository }} failed build for ${{ github.ref_name }} by ${{ github.actor }}
            [Pipeline](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) failed :fire:
          MATTERMOST_USERNAME: ${{ github.triggering_actor }}
